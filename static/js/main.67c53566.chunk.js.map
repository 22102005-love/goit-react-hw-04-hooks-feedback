{"version":3,"sources":["components/FeedbackOptions.js","components/Notification.js","components/Statistics.js","components/Section.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","data-feedback","type","onClick","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","App","useState","setGood","setNeutral","setBad","countTotalFeedback","positivPercentage","totalFeedback","goodFeedback","Math","round","countPositivPercentage","target","dataset","feedback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAceA,EAZS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,wBACEC,gBAAeD,EAEfE,KAAK,SACLC,QAASL,EAJX,SAMGE,GAJIA,OCDII,EAHM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCYEC,EAbI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OAAOD,EAAQ,EACb,gCACE,sCAASH,KACT,yCAAYC,KACZ,qCAAQC,KACR,uCAAUC,KACV,qDAAwBC,EAAxB,UAGF,cAAC,EAAD,CAAcN,QAAQ,uBCFXO,EARC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,M,MCAQ,SAASC,IAAO,IAAD,EACJC,mBAAS,GADL,mBACrBT,EADqB,KACfU,EADe,OAEED,mBAAS,GAFX,mBAErBR,EAFqB,KAEZU,EAFY,OAGNF,mBAAS,GAHH,mBAGrBP,EAHqB,KAGhBU,EAHgB,KAuBtBC,EAAqB,WACzB,OAAOb,EAAOC,EAAUC,GASpBC,EAAQU,IACRC,EARyB,WAC7B,IAAMC,EAAgBF,IAChBG,EAAehB,EACrB,OAAOiB,KAAKC,MAAsB,IAAfF,EAAsBD,GAKjBI,GAC1B,OACE,gCACE,cAAC,EAAD,CAASb,MAAM,wBAAf,SACE,cAAC,EAAD,CACEhB,QAPK,CAAC,OAAQ,UAAW,OAQzBC,gBAnCoB,SAAC,GAG3B,OAH0C,EAAb6B,OAEDC,QAApBC,UAEN,IAAK,OACHZ,EAAQV,EAAO,GACf,MACF,IAAK,UACHW,EAAWV,EAAU,GACrB,MACF,IAAK,MACHW,EAAOV,EAAM,GACb,MAEF,QACE,aAuBF,cAAC,EAAD,CAASI,MAAM,aAAf,SACE,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBU,SClD9BS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.67c53566.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(option => (\n    <button\n      data-feedback={option}\n      key={option}\n      type=\"button\"\n      onClick={onLeaveFeedback}\n    >\n      {option}\n    </button>\n  ));\n};\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Notification from './Notification.js';\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return total > 0 ? (\n    <div>\n      <p>Good:{good}</p>\n      <p>Neutral:{neutral}</p>\n      <p>Bad:{bad}</p>\n      <p>Total:{total}</p>\n      <p>Positive percentage:{positivePercentage}%</p>\n    </div>\n  ) : (\n    <Notification message=\"No feedback given\" />\n  );\n};\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n","import { useState } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions.js';\nimport Statistics from './components/Statistics.js';\nimport Section from './components/Section.js';\nimport './App.css';\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleLeaveFeedback = ({ target }) => {\n    // console.log(target);\n    const { feedback } = target.dataset;\n    switch (feedback) {\n      case 'good':\n        setGood(good + 1);\n        break;\n      case 'neutral':\n        setNeutral(neutral + 1);\n        break;\n      case 'bad':\n        setBad(bad + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n  const countPositivPercentage = () => {\n    const totalFeedback = countTotalFeedback();\n    const goodFeedback = good;\n    return Math.round((goodFeedback * 100) / totalFeedback);\n  };\n\n  const data = ['good', 'neutral', 'bad'];\n  const total = countTotalFeedback();\n  const positivPercentage = countPositivPercentage();\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={data}\n          onLeaveFeedback={handleLeaveFeedback}\n        ></FeedbackOptions>\n      </Section>\n      <Section title=\"Statistics\">\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={total}\n          positivePercentage={positivPercentage}\n        ></Statistics>\n      </Section>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}